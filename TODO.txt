## TODO 목록

1. [x] 경로 관련 설정을 Path 모듈로 분리해야 함
2. [ ] const.py를 config 모듈로 분리하고, 관련 설정들을 체계적으로 관리해야 함
   - 특히 audio.py와 연동되는 음악 및 효과음 관련 설정에 대한 주의가 필요함
3. [ ] 파일에 맞는 정보들은 서버를 통해서 받아오도록 해야 함.
   - 오프라인일 경우에는 기본 정보들을 사용하되, 기본적으로 서버에서 받아오도록 함.
4. [ ] 데이터베이스를 통해 방 세션에 대한 정보도 생성해야 하는데
   - 세션 정보에는 아래의 각 정보가 포함되어야 함:
     1. [ ] 사용자 행동 로그
     2. [ ] 난이도 관련 환경 변수 조작 로그
     3. [ ] 게임 진행 정보 (엔티티 생성, 공격 이벤트, 아이템 스폰 등)
     - 시간 정보를 항상 기록해야 함.
       - 시간 정보는 0ms부터 시작하여 ms 단위의 timestamp로 기록함.
5. [ ] .tmx 파일은 2D 타일 맵을 정의하기 위한 형식이며 Tiled 맵 데이터에서 사용되는 형식임.
   - DDA를 통해 맵을 구성할 수 있도록 하기 위해서 이 파일들을 적극적으로 사용해보고자 함.
   - 현재 단계에서는 이미 정의된 파일들을 사용하되, 추후에는 게임 서버에서 직접 만들어서 제공할 수 있도록 코드를 분리하면 될 듯.
   - 그럼 최종적으로 서버에서는 난이도 조정을 위해 "맵 생성"과 "변수 조정" 둘 모두에 관여가 가능해짐.
6. [ ] StageNum 열거형에 대한 의존성 제거
   - 선언 위치: src/config/const.py
   - 사용 위치:
     1. src/config/music/music_config.py (스테이지별 음악 매핑)
     2. src/states/game_state/game_state_stage.py (스테이지 음악 로딩, 스테이지 클리어 처리)
     3. src/config/const.py (FINAL_STAGE 정의)
   - 동적 스테이지 관리를 위해 StageNum 사용 제거 및 대체 구조 설계 필요
   - 음악 및 게임 진행 로직에서 StageNum 참조 제거하고 데이터 기반 접근 방식으로 변경 필요
   - DDA 구현을 위해 스테이지 정보를 동적으로 생성/관리할 수 있는 구조로 변경 

## 점수 체계 개선

7. [ ] 점수 표시 체계와 내부 저장 값 분리
   - 실제 표시: 999999점까지는 정확한 점수 표시, 이후에는 "999999+"로 표시
   - 내부 저장: 실제 획득 점수를 그대로 저장
   - 구현 필요 사항:
     1. [ ] UI 표시 로직 수정: 특정 임계값(999999점)을 초과하면 "999999+"로 표시
     2. [ ] 점수 저장 로직은 변경 없이 실제 점수를 그대로 유지
     3. [ ] 관련 테스트 케이스 추가: 표시 로직과 내부 저장 값 검증
   - 고려 사항:
     - 점수 포맷팅 유틸리티 함수 생성
     - 다양한 언어 환경(다국어 지원)에서의 표시 처리 방안 검토
     - 점수 리셋/초기화 로직과의 연관성 확인

